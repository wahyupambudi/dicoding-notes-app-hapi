{
	"info": {
		"_postman_id": "a2ee7d92-2d12-41e8-b988-cf03b4f9aa32",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(201);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							" \r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Catatan A\",\r\n   \"tags\": [\"Android\", \"Web\"],\r\n   \"body\": \"Isi dari catatan A\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding Notes with Bad Note Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
							" \r",
							"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
							"    badNotePayloads = [\r",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
							"    ]\r",
							"}\r",
							" \r",
							"let currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							" \r",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.be.ok;\r",
							"})\r",
							"\r",
							"const repeatRequestUntilDatasetEmpty = () => {\r",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
							"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
							"        postman.setNextRequest('Adding Notes with Bad Note Payload');\r",
							"    }\r",
							"}\r",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('notes');\r",
							"   pm.expect(data.notes).to.be.an('array');\r",
							"   pm.expect(data.notes).lengthOf.at.least(1);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should contain note object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('note');\r",
							"   pm.expect(data.note).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('note object should contain correct value for id, title, body, tags, and username property', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data: { note } } = responseJson;\r",
							" \r",
							"   const expectedId = pm.environment.get('noteId');\r",
							"   const expectedTitle = 'Catatan A';\r",
							"   const expectedTags = ['Android', 'Web'];\r",
							"   const expectedBody = 'Isi dari catatan A';\r",
							" \r",
							"   pm.expect(note).to.have.ownProperty('id');\r",
							"   pm.expect(note.id).to.equals(expectedId);\r",
							"   pm.expect(note).to.have.ownProperty('title');\r",
							"   pm.expect(note.title).to.equals(expectedTitle);\r",
							"   pm.expect(note).to.have.ownProperty('tags');\r",
							"   pm.expect(note.tags).to.eql(expectedTags);\r",
							"   pm.expect(note).to.have.ownProperty('body');\r",
							"   pm.expect(note.body).to.equals(expectedBody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"   pm.response.to.have.status(201);",
							"}); ",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body data should have userId property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							" ",
							"    pm.expect(data).to.ownProperty('userId');",
							"    pm.expect(data.userId).to.not.equals('');",
							" ",
							"    pm.environment.set('currentUserId', data.userId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"{{$timestamp}}-{{newUsername}}\",\n    \"password\" : \"{{newPassword}}\",\n    \"fullname\" : \"{{newFullname}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/users",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User With Exist Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {",
							"   pm.response.to.have.status(400);",
							"}); ",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Gagal menambahkan user. Username sudah digunakan.');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */",
							" ",
							"const postRequest = {",
							"    url: 'http://localhost:5000/users',",
							"    method: 'POST',",
							"    header: {",
							"    'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            username: 'testing',",
							"            password: pm.environment.get('newPassword'),",
							"            fullname: pm.environment.get('newFullname')",
							"        }),",
							"    },",
							"};",
							" ",
							"pm.sendRequest(postRequest, (error, response) => {",
							"    console.log(error ? error : response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"testing\",\n    \"password\" : \"{{newPassword}}\",\n    \"fullname\" : \"{{newFullname}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/users",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User with Bad User Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badUserPayloads = pm.environment.get('badUserPayloads');",
							" ",
							"if (!badUserPayloads || badUserPayloads.length === 0) {",
							"    badUserPayloads = [",
							"        { password: 'secret', fullname: 'John Doe' },",
							"        { username: 1, password: 'secret', fullname: 'John Doe' },",
							"        { username: 'johndoe', fullname: 'John Doe' },",
							"        { username: 'johndoe', password: true, fullname: 'John Doe' },",
							"        { username: 'johndoe', password: 'secret'},",
							"        { username: 'johndoe', password: 'secret', fullname: 0 },",
							"    ]",
							"}",
							" ",
							"const currentBadUserPayload = badUserPayloads.shift();",
							"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));",
							"pm.environment.set('badUserPayloads', badUserPayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {",
							"   pm.response.to.have.status(400);",
							"}); ",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.not.equals(' ');",
							"    pm.expect(responseJson.message).to.not.equals(null);",
							"});",
							" ",
							"const repeatRequestUntilDatasetEmpty = () => {",
							"    const badUserPayloads = pm.environment.get('badUserPayloads');",
							" ",
							"    if(badUserPayloads && badUserPayloads.length > 0) {",
							"        postman.setNextRequest('Adding User with Bad User Payload');",
							"    }",
							"}",
							" ",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadUserPayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/users",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"\r",
							"const getUpdatedBookRequest = {\r",
							"    url: `http://localhost:5000/notes/${pm.environment.get('noteId')}`,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"        'Authorization': `Bearer ${pm.environment.get('accessToken')}`\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('when request the updated note', () => {\r",
							"    pm.sendRequest(getUpdatedBookRequest, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then the updated note should contain the latest data', () => {\r",
							"                const responseJson = response.json();\r",
							"                const { data: { note } } = responseJson;\r",
							" \r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							" \r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note with Bad Note Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
							" \r",
							"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
							"    badNotePayloads = [\r",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
							"    ]\r",
							"}\r",
							" \r",
							"const currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							" \r",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.be.ok;\r",
							"});\r",
							" \r",
							"const repeatRequestUntilDatasetEmpty = () => {\r",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
							" \r",
							"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
							"        postman.setNextRequest('Update Note with Bad Note Payload');\r",
							"    }\r",
							"}\r",
							" \r",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"}); \r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"}); \r",
							"\r",
							"const getDeletedBookRequest = {\r",
							"    url: `http://localhost:5000/notes/${pm.environment.get('noteId')}`,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"        'Authorization': `Bearer ${pm.environment.get('accessToken')}`\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(getDeletedBookRequest, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User by Incorrect Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 404 value', () => {",
							"    pm.response.to.have.status(404);",
							"});",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('User tidak ditemukan');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/users/xxxx",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"xxxx"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User by Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body data should contain user object', () => {",
							"    const { data } = pm.response.json();",
							" ",
							"    pm.expect(data).to.have.ownProperty('user');",
							"    pm.expect(data.user).to.be.an('object');",
							"});",
							" ",
							"pm.test('user object should contain only id, username, and fullname with correct value', () => {",
							"    const { data: { user } } = pm.response.json();",
							" ",
							"    pm.expect(user).to.have.ownProperty('id');",
							"    pm.expect(user.id).to.equals(pm.environment.get('currentUserId'));",
							"    pm.expect(user).to.have.ownProperty('username');",
							"    pm.expect(user.username).to.includes(pm.environment.get('newUsername'));",
							"    pm.expect(user).to.have.ownProperty('fullname');",
							"    pm.expect(user.fullname).to.equals(pm.environment.get('newFullname'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/users/{{currentUserId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"{{currentUserId}}"
					]
				}
			},
			"response": []
		}
	]
}
